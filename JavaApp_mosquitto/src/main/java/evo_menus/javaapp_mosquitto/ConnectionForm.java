package evo_menus.javaapp_mosquitto;


import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */

/**
 *
 * @author joelm
 */
public class ConnectionForm extends javax.swing.JFrame {

    /**
     * Creates new form ConnectionForm
     */
    public ConnectionForm() {
        initComponents();
    }

    public ConnectionForm(JMenuItem aboutMenuItem, JButton btAdicionar, JButton btLigar, JButton btRemover, JMenuItem contentsMenuItem, JMenuItem copyMenuItem, JMenuItem cutMenuItem, JMenuItem deleteMenuItem, JMenu editMenu, JMenuItem exitMenuItem, JMenu fileMenu, JMenu helpMenu, JLabel jLabel1, JLabel jLabel2, JLabel jLabel3, JScrollPane jScrollPane1, JMenuBar menuBar, JMenuItem openMenuItem, JMenuItem pasteMenuItem, JMenuItem saveAsMenuItem, JMenuItem saveMenuItem, JTextArea taMensagens, JTextField tfDestino, JTextField tfSubescrever) throws HeadlessException {
        this.btConectar = btLigar;
        this.jLabel1 = jLabel1;
        this.jLabel2 = jLabel2;
        this.jScrollPane1 = jScrollPane1;
        this.taMensagens = taMensagens;
        this.tfIP = tfDestino;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tfIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btConectar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taMensagens = new javax.swing.JTextArea();
        btDesconectar = new javax.swing.JButton();
        tfPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btApagar = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfIPKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfIPKeyTyped(evt);
            }
        });

        jLabel1.setText("IP:");

        btConectar.setText("Conectar");
        btConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConectarActionPerformed(evt);
            }
        });

        jLabel2.setText("Mensagens:");

        taMensagens.setColumns(20);
        taMensagens.setRows(5);
        taMensagens.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        taMensagens.setEnabled(false);
        taMensagens.setFocusable(false);
        jScrollPane1.setViewportView(taMensagens);

        btDesconectar.setText("Desconectar");
        btDesconectar.setEnabled(false);
        btDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDesconectarActionPerformed(evt);
            }
        });

        tfPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPortKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPortKeyTyped(evt);
            }
        });

        jLabel3.setText("Port:");

        btApagar.setText("Apagar");
        btApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btApagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfIP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(btConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btDesconectar))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btApagar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btConectar)
                    .addComponent(btDesconectar))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(btApagar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    MqttClient myClient;
    
    private void btConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConectarActionPerformed
        Connect();
    }//GEN-LAST:event_btConectarActionPerformed

    private void tfIPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIPKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            Connect();
        }
    }//GEN-LAST:event_tfIPKeyPressed
    
    int i = 0;
    private void btDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDesconectarActionPerformed
        try {
            myClient.disconnect();
            taMensagens.setText("Desconectado" + "\r\n" + taMensagens.getText());
            //taMensagens.setText(taMensagens.getText() + "\r\n" + "Desconectado");
            tfIP.setEnabled(true);
            tfPort.setEnabled(true);
            btConectar.setEnabled(true);
            btDesconectar.setEnabled(false);
        } catch (MqttException ex) {
            taMensagens.setText("Imposs√≠vel desconectar" + "\r\n" + taMensagens.getText());
            //taMensagens.setText(taMensagens.getText() + "\r\n" + "Imposs√≠vel desconectar");
            i++;
            if(i > 4)
                System.exit(0);
        }        
    }//GEN-LAST:event_btDesconectarActionPerformed
    
    private void tfPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPortKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            Connect();
        }
    }//GEN-LAST:event_tfPortKeyPressed
    
    private void tfIPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIPKeyTyped
        String text = tfIP.getText();
        if(text.length() > 14){
            tfIP.setText(text.substring(0, text.length() - 1));
        }
    }//GEN-LAST:event_tfIPKeyTyped
    
    private void tfPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPortKeyTyped
        String text = tfPort.getText();
        if(text.length() > 4){
            tfPort.setText(text.substring(0, text.length() - 1));
        }
    }//GEN-LAST:event_tfPortKeyTyped

    private void btApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btApagarActionPerformed
        taMensagens.setText("");
    }//GEN-LAST:event_btApagarActionPerformed
    
    private void Connect(){
        try{
            String clientID= "receiver1";
            if(tfPort.getText().length() == 0)
                myClient = new MqttClient("tcp://" + tfIP.getText() + ":1883", clientID, null);
            else
                myClient = new MqttClient("tcp://" + tfIP.getText() + ":" + tfPort.getText(), clientID, null);
            myClient.setCallback(new MqttCallback() {       
                @Override
                public void messageArrived(String topic, MqttMessage msg) throws Exception {
                    String messageBody = new String(msg.getPayload());
                    taMensagens.setText(messageBody + "\r\n" + taMensagens.getText());
                    //taMensagens.setText(taMensagens.getText() + "\r\n" + messageBody);
                }
                @Override
                public void deliveryComplete(IMqttDeliveryToken token) {
                    taMensagens.setText("Mensagem enviada" + "\r\n" + taMensagens.getText());
                    //taMensagens.setText(taMensagens.getText() + "\r\n" + "Mensagem enviada");
                }
                @Override
                public void connectionLost(Throwable exception) {
                    taMensagens.setText("Imposs√≠vel enviar mensagem" + "\r\n" + taMensagens.getText());
                    //taMensagens.setText(taMensagens.getText() + "\r\n" + "Imposs√≠vel enviar mensagem");
                }
            });  
            myClient.connect();
            myClient.subscribe("apiLog", 0);
            if(taMensagens.getText().length() <= 0)
                taMensagens.setText("Conectado");
            else
                taMensagens.setText("Conectado" + "\r\n" + taMensagens.getText());
                //taMensagens.setText(taMensagens.getText() + "\r\n" + "Conectado");
            tfIP.setEnabled(false);
            tfPort.setEnabled(false);
            btConectar.setEnabled(false);
            btDesconectar.setEnabled(true);
        }
        catch(Exception ex)
        {
            if(taMensagens.getText().length() <= 0)
                taMensagens.setText("Imposs√≠vel conectar");
            else
                taMensagens.setText("Imposs√≠vel conectar" + "\r\n" + taMensagens.getText());
                //taMensagens.setText(taMensagens.getText() + "\r\n" + "Imposs√≠vel conectar");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btApagar;
    private javax.swing.JButton btConectar;
    private javax.swing.JButton btDesconectar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taMensagens;
    private javax.swing.JTextField tfIP;
    private javax.swing.JTextField tfPort;
    // End of variables declaration//GEN-END:variables

}
